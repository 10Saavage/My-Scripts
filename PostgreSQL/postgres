#!/bin/bash
#
#AUTHOR: TOUSSI MANOEL MALAURY
#DESCRIPTION
#
###########################################################
#color of output
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
NC='\033[0m' #No Color
#############################################################
#update these variables in according to your context
#############################################################
POSTGRESQL_HOME=/usr/local/pgsql/
POSTGRESQL_LOG=$POSTGRESQL_HOME/logs/postgresql
##########################################################
#you must create the directory logs on POSTGRESQL_HOME
#mkdir logs
#create file postgre
#touch postgre
##########################################################
POSTGRESQL_PID=$POSTGRESQL_HOME/data/postmaster.pid
POSTGRESQL_DATA=$POSTGRESQL_HOME/data

#to start PostgreSQL service
start() {
    #chek if PostgreSQL service is running
    #check if file 'postmaster.pid' exists
    if [ -e $POSTGRESQL_PID ] 
    then
        echo -e "${yellow}PostgreSQL is already started ${NC}"
    else
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA -l $POSTGRESQL_LOG start
    fi
}

#to stop PostgreSQL service
stop() {
    #chek if PostgreSQL service is running
    #check if file 'postmaster.pid' exists
    if [ -e $POSTGRESQL_PID ]
    then
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA -l $POSTGRESQL_LOG stop
        echo -e "${red}PostgreSQL is stopped ${NC}"
    else
        echo -e "${yellow}PostgreSQL has already stopped ${NC}"
    fi
}

#to restart PostgreSQL service
restart() {
    #chek if PostgreSQL service is running
    #check if file 'postmaster.pid' exists
    if [ -e $POSTGRESQL_PID ]
    then
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA -l $POSTGRESQL_LOG reload
        echo -e "${yellow}PostgreSQL has restarted ${NC}"
    else
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA -l $POSTGRESQL_LOG start
    fi
}

#check the status of PostgreSQL
status() {
    #chek if PostgreSQL service is running
    #check if file 'postmaster.pid' exists
    if [ -e $POSTGRESQL_PID ]
    then
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA status
        echo -e "${green}PostgreSQL is running ... ${NC}"
    else
        $POSTGRESQL_HOME/bin/pg_ctl -D $POSTGRESQL_DATA status
        echo -e "${red}PostgreSQL is stopped ${NC}"
    fi
}

#list databases
list_databases() {
    $POSTGRESQL_HOME/bin/psql -U postgres -l 
}

#to log on the command line
connect() {
    #chek if PostgreSQL service is running
    #check if file 'postmaster.pid' exists
    if [ -e $POSTGRESQL_PID ]
    then
        list_databases
        echo -e "Connect to Database"
        read -p "user(default: postgres) : " user
        read -p "Name of Database: " database

        #check if user is not empty
        if [ $user ]
        then
            $POSTGRESQL_HOME/bin/psql -W -U $user -h localhost -d $database 
        else
            $POSTGRESQL_HOME/bin/psql -W -U postgres -h localhost -d $database
        fi
    else
        echo -e "${red}PostgreSQL is stopped. ${NC}"
        echo -e "${yellow}You need to start PostgreSQL service ${NC}"
    fi
}

# Display Help
help()
{
   echo "Available options are: "
   echo "{start|stop|restart|status|list_db|connect|help|-h}"
   echo " "
   echo "start      to start PostgreSQL"
   echo "stop       to stop PostgreSQL"
   echo "restart    to restart PostgreSQL"
   echo "status     to check the status of PostgreSQL"
   echo "list_db    to list all databases"
   echo "connect    to log on the command line"
   echo "help or -h to display help"
}

case "$1" in
       	#start	PostgreSQL
	"start")
		start
	;;
	#stop PostgreSQL
	"stop")
		stop
	;;
	#restart PostgreSQL
	"restart")
		restart
	;;
	#check status of PostgreSQL
	"status")
		status
	;;
	#List databases
	"list_db")
		list_databases
	;;
	#connect to PostgreSQL shell 
	"connect")
		connect
	;;
	#Display help
	"help")
		help
	;;
	"-h")
		help
	;;
	*)
		help
	;;

esac
